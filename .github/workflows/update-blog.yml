# .github/workflows/update-blog.yml
name: Update Blog from Substack

on:
  schedule:
    - cron: '0 9 * * *'  # 9 AM UTC daily
  workflow_dispatch: # Manual trigger

jobs:
  update-blog:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install axios cheerio
        
    - name: Update blog with RSS2JSON
      run: |
        cat > update-blog.js << 'EOF'
        const axios = require('axios');
        const cheerio = require('cheerio');
        const fs = require('fs');
        
        async function updateBlog() {
          try {
            console.log('üöÄ Starting blog update...');
            
            // Use RSS2JSON API to bypass Substack's blocking
            const RSS_API_URL = 'https://api.rss2json.com/v1/api.json?rss_url=https://eliasgrove3.substack.com/feed';
            
            console.log('üì° Fetching RSS data via RSS2JSON...');
            const response = await axios.get(RSS_API_URL, {
              timeout: 15000,
              headers: {
                'User-Agent': 'GitHub-Actions-Blog-Updater/1.0'
              }
            });
            
            if (response.data.status !== 'ok') {
              throw new Error(`RSS2JSON API error: ${response.data.message || 'Unknown error'}`);
            }
            
            const posts = response.data.items;
            console.log(`‚úÖ Found ${posts.length} posts`);
            
            if (posts.length === 0) {
              console.log('‚ÑπÔ∏è  No posts found, skipping update');
              return;
            }
            
            // Find HTML file
            const htmlFiles = ['blog.html', 'index.html'];
            let targetFile = null;
            
            for (const file of htmlFiles) {
              if (fs.existsSync(file)) {
                targetFile = file;
                console.log(`üìÑ Found HTML file: ${file}`);
                break;
              }
            }
            
            if (!targetFile) {
              throw new Error('No HTML file found');
            }
            
            // Helper functions
            function formatDate(dateString) {
              const date = new Date(dateString);
              const now = new Date();
              const diffDays = Math.ceil((now - date) / (1000 * 60 * 60 * 24));
              
              if (diffDays <= 1) return 'Today';
              if (diffDays <= 7) return `${diffDays} days ago`;
              if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks ago`;
              
              return date.toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric',
                year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined
              });
            }
            
            function stripHtml(html) {
              return cheerio.load(html).text().trim();
            }
            
            function estimateReadTime(content) {
              const words = stripHtml(content).split(/\s+/).length;
              const minutes = Math.ceil(words / 200);
              return `${minutes} min read`;
            }
            
            function getThemeClass(title, content) {
              const text = (title + ' ' + content).toLowerCase();
              if (text.match(/\b(ai|artificial intelligence|machine learning|gpt|claude)\b/)) return 'ai-theme';
              if (text.match(/\b(career|work|job|professional|business)\b/)) return 'career-theme';
              if (text.match(/\b(art|creative|design|aesthetic|painting|visual)\b/)) return 'art-theme';
              return '';
            }
            
            // Read and parse HTML
            const htmlContent = fs.readFileSync(targetFile, 'utf8');
            const $ = cheerio.load(htmlContent);
            
            // Update featured post (latest)
            const featuredPost = posts[0];
            const featuredExcerpt = stripHtml(featuredPost.description || featuredPost.content || '').substring(0, 150) + '...';
            const featuredTheme = getThemeClass(featuredPost.title, featuredPost.description || '');
            
            const featuredHtml = `
              <h2>Latest Article</h2>
              <a href="${featuredPost.link}" class="featured-card" target="_blank" rel="noopener noreferrer">
                <div class="featured-card-image ${featuredTheme}">
                  ${featuredPost.thumbnail ? 
                    `<img src="${featuredPost.thumbnail}" alt="${featuredPost.title}" style="width: 100%; height: 100%; object-fit: cover;">` 
                    : ''
                  }
                </div>
                <div class="featured-card-content">
                  <h3 class="featured-card-title">${featuredPost.title}</h3>
                  <p class="featured-card-excerpt">${featuredExcerpt}</p>
                  <div class="featured-card-meta">
                    <span class="article-date">${formatDate(featuredPost.pubDate)} ‚Ä¢ ${featuredPost.author || 'Elias Grove'}</span>
                    <span class="read-more-btn">Read Article</span>
                  </div>
                </div>
              </a>
            `;
            
            $('.featured-post').html(featuredHtml);
            console.log(`‚úÖ Updated featured post: "${featuredPost.title}"`);
            
            // Update articles grid (previous posts)
            if (posts.length > 1) {
              const previousPosts = posts.slice(1, 7); // Show up to 6 previous posts
              let articlesHtml = '';
              
              previousPosts.forEach(post => {
                const excerpt = stripHtml(post.description || post.content || '').substring(0, 100) + '...';
                const theme = getThemeClass(post.title, post.description || '');
                const readTime = estimateReadTime(post.content || post.description || '');
                
                articlesHtml += `
                  <a href="${post.link}" class="article-card" target="_blank" rel="noopener noreferrer">
                    <div class="article-card-image ${theme}">
                      ${post.thumbnail ? 
                        `<img src="${post.thumbnail}" alt="${post.title}" style="width: 100%; height: 100%; object-fit: cover;">`
                        : ''
                      }
                    </div>
                    <div class="article-card-content">
                      <h3 class="article-card-title">${post.title}</h3>
                      <p class="article-card-excerpt">${excerpt}</p>
                      <div class="article-card-meta">
                        <span class="article-date">${formatDate(post.pubDate)} ‚Ä¢ ${post.author || 'Elias Grove'}</span>
                        <span class="article-read-time">${readTime}</span>
                      </div>
                    </div>
                  </a>
                `;
              });
              
              $('.articles-grid').html(articlesHtml);
              console.log(`‚úÖ Updated ${previousPosts.length} previous articles`);
            }
            
            // Add update timestamp
            const updateComment = `<!-- Blog auto-updated: ${new Date().toISOString()} -->`;
            const updatedHtml = $.html();
            
            // Remove old timestamp and add new one
            const finalHtml = updatedHtml
              .replace(/<!-- Blog auto-updated:.*?-->/g, '')
              .replace('<head>', `<head>\n${updateComment}`);
            
            // Save updated HTML
            fs.writeFileSync(targetFile, finalHtml);
            console.log('üéâ Blog updated successfully!');
            
            // Create summary
            const summary = {
              timestamp: new Date().toISOString(),
              postsFound: posts.length,
              latestPost: {
                title: featuredPost.title,
                publishDate: featuredPost.pubDate,
                url: featuredPost.link
              }
            };
            
            fs.writeFileSync('update-summary.json', JSON.stringify(summary, null, 2));
            console.log('üìä Update summary saved');
            
          } catch (error) {
            console.error('‚ùå Error updating blog:', error.message);
            
            // Save error details
            const errorDetails = {
              timestamp: new Date().toISOString(),
              error: error.message,
              stack: error.stack
            };
            
            fs.writeFileSync('update-error.json', JSON.stringify(errorDetails, null, 2));
            
            // Don't fail the entire workflow - just log the error
            console.log('üíæ Error details saved to update-error.json');
          }
        }
        
        updateBlog();
        EOF
        
        node update-blog.js
        
    - name: Display update results
      run: |
        if [ -f update-summary.json ]; then
          echo "‚úÖ Update Summary:"
          cat update-summary.json
        fi
        
        if [ -f update-error.json ]; then
          echo "‚ùå Error Details:"
          cat update-error.json
        fi
        
    - name: Check for changes
      id: changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "üìù Changes detected:"
          git status --short
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è  No changes to commit"
        fi
        
    - name: Commit and push changes
      if: steps.changes.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git add .
        git commit -m "ü§ñ Auto-update blog from Substack RSS ($(date -u +%Y-%m-%d))"
        git push
        echo "‚úÖ Changes pushed to repository"
